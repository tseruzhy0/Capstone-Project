@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "You must specify a password.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty()) {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        } else if (Validation.IsValid()) {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow) {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe)) {
                Context.RedirectLocal(returnUrl);
                return;
            } else {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}

<div class="container">
     <div class="page-header">
          <h1>@Page.Title</h1>
     </div>

     <form method="post" role="form">
          @AntiForgery.GetHtml()
          @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

          <div class="form-group email">
               <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>  }>Email address</label>
               <input style="width:30%" class="form-control" type="text" id="email" name="email" value="@email" @Validation.For("email") />
               @* Write any user name validation errors to the page *@
               @Html.ValidationMessage("email")
          </div>
          <div class="form-group password">
               <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>  }>Password</label>
               <input style="width:30%" class="form-control" type="password" id="password" name="password" @Validation.For("password") />
               @* Write any password validation errors to the page *@
               @Html.ValidationMessage("password")
          </div>
          <div class="form-group remember-me checkbox">
               <label class ="checkbox" for="rememberMe"><input type="checkbox" id="rememberMe" name="rememberMe" value="true" checked="@rememberMe" />Remember me?</label>
          </div>
          <button class="btn btn-default" type="submit" >Login</button>
     </form>

     <div class="content-wrapper">
          <p>
               <a href="~/Account/Register">Don't have a Account?</a>
               <a href="~/Account/ForgotPassword">Did you forget your password?</a>
          </p>
     </div>
</div>