@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Register";

    // Initialize general page variables
    var firstName = "";
    var lastName = "";
    var university = "";
    var city = "";
    var email = "";
    var password = "";
    var confirmPassword = "";
    bool newsletterOpt = false;
    var newsletter = "";

    // Setup validation
    Validation.RequireField("firstName", "You must enter your first name.");
    Validation.RequireField("lastName", "You must enter your last name.");
    Validation.RequireField("university", "You must enter the University you are attending or graduated from.");
    Validation.RequireField("city", "You must enter the city you are living in.");
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        firstName = Request.Form["firstName"];
        lastName = Request.Form["lastName"];
        university = Request.Form["university"];
        city = Request.Form["city"];
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        newsletter = Request.Form["newsletter"];
        

        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("StarterSite");

            if(!String.IsNullOrEmpty(newsletter)) {
                newsletterOpt = true;    
            }

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email,FirstName,LastName,University,City,Newsletter) VALUES (@0, @1, @2, @3, @4,@5)", email,firstName,lastName,university,city,newsletterOpt);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

<div class="container">
     <div class="page-header">
          <h1>@Page.Title</h1>
     </div>

     <form method="post">
          @AntiForgery.GetHtml()
          @* If at least one validation error exists, notify the user *@
          @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

          <div class="form-group firstName">
               <label for="firstName" @if (!ModelState.IsValidField("firstName")) { <text> class="error-label" </text> }>First Name</label>
               <input style="width:20%" class="form-control" type="text" id="firstName" name="firstName" value="@firstName" @Validation.For("firstName") />
               @* Write any name validation errors to the page *@
               @Html.ValidationMessage("firstName")
          </div>
          <div class="form-group lastName">
               <label for="lastName" @if (!ModelState.IsValidField("lastName")) { <text> class="error-label" </text>   }>Last Name</label>
               <input style="width:20%" class="form-control" type="text" id="lastName" name="lastName" value="@lastName" @Validation.For("lastName") />
               @* Write any name validation errors to the page *@
               @Html.ValidationMessage("lastName")
          </div>
          <div class="form-group university">
               <label for="university" @if (!ModelState.IsValidField("university")) { <text> class="error-label" </text>   }>University</label>
               <input style="width:20%" class="form-control" type="text" id="university" name="university" value="@university" @Validation.For("university") />
               @* Write any university validation errors to the page *@
               @Html.ValidationMessage("university")
          </div>
          <div class="form-group city">
               <label for="city" @if (!ModelState.IsValidField("city")) { <text> class="error-label" </text>   }>City</label>
               <input style="width:20%" class="form-control" type="text" id="city" name="city" value="@city" @Validation.For("city") />
               @* Write any city validation errors to the page *@
               @Html.ValidationMessage("city")
          </div>
          <div class="form-group email">
               <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>   }>Email address</label>
               <input style="width:20%" class="form-control" type="text" id="email" name="email" value="@email" @Validation.For("email") />
               @* Write any email validation errors to the page *@
               @Html.ValidationMessage("email")
          </div>
          <div class="form-group newsletter">
               Would you like to recieve a newsletter (NOTE: you will still recieve group and camp specific newsletter for ones you have signed up for)<br />
               Newsletter <input type="checkbox" name="newsletter" value="newsletter" /><br />
          </div>
          <div class="form-group password">
               <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>   }>Password</label>
               <input style="width:20%" class="form-control" type="password" id="password" name="password" @Validation.For("password") />
               @* Write any password validation errors to the page *@
               @Html.ValidationMessage("password")
          </div>
          <div class="form-group confirm-password">
               <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>   }>Confirm password</label>
               <input style="width:20%" class="form-control" type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
               @* Write any password validation errors to the page *@
               @Html.ValidationMessage("confirmPassword")
          </div>

          <input type="submit" value="Register" />
     </form>
</div>